// Copyright (c) 2025 Nexus. All rights reserved.
//
// If you use this protocol to communicate with Nexus's servers,
// you must agree to the Terms of Use: https://nexus.xyz/terms-of-use

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v3.21.4
// source: orchestrator.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type NodeType int32

const (
	// The node is a web prover.
	NodeType_WEB_PROVER NodeType = 0
	// The node is a CLI prover.
	NodeType_CLI_PROVER NodeType = 1
)

// Enum value maps for NodeType.
var (
	NodeType_name = map[int32]string{
		0: "WEB_PROVER",
		1: "CLI_PROVER",
	}
	NodeType_value = map[string]int32{
		"WEB_PROVER": 0,
		"CLI_PROVER": 1,
	}
)

func (x NodeType) Enum() *NodeType {
	p := new(NodeType)
	*p = x
	return p
}

func (x NodeType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NodeType) Descriptor() protoreflect.EnumDescriptor {
	return file_orchestrator_proto_enumTypes[0].Descriptor()
}

func (NodeType) Type() protoreflect.EnumType {
	return &file_orchestrator_proto_enumTypes[0]
}

func (x NodeType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NodeType.Descriptor instead.
func (NodeType) EnumDescriptor() ([]byte, []int) {
	return file_orchestrator_proto_rawDescGZIP(), []int{0}
}

// Register a User.
type RegisterUserRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// UUIDv4 identifier for the user.
	Uuid string `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	// The user's wallet public address.
	WalletAddress string `protobuf:"bytes,2,opt,name=wallet_address,json=walletAddress,proto3" json:"wallet_address,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RegisterUserRequest) Reset() {
	*x = RegisterUserRequest{}
	mi := &file_orchestrator_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RegisterUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterUserRequest) ProtoMessage() {}

func (x *RegisterUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_orchestrator_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterUserRequest.ProtoReflect.Descriptor instead.
func (*RegisterUserRequest) Descriptor() ([]byte, []int) {
	return file_orchestrator_proto_rawDescGZIP(), []int{0}
}

func (x *RegisterUserRequest) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *RegisterUserRequest) GetWalletAddress() string {
	if x != nil {
		return x.WalletAddress
	}
	return ""
}

// Register a node.
type RegisterNodeRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The type of this node.
	NodeType NodeType `protobuf:"varint,1,opt,name=node_type,json=nodeType,proto3,enum=nexus.orchestrator.NodeType" json:"node_type,omitempty"`
	// The owner of the node.
	UserId        string `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RegisterNodeRequest) Reset() {
	*x = RegisterNodeRequest{}
	mi := &file_orchestrator_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RegisterNodeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterNodeRequest) ProtoMessage() {}

func (x *RegisterNodeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_orchestrator_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterNodeRequest.ProtoReflect.Descriptor instead.
func (*RegisterNodeRequest) Descriptor() ([]byte, []int) {
	return file_orchestrator_proto_rawDescGZIP(), []int{1}
}

func (x *RegisterNodeRequest) GetNodeType() NodeType {
	if x != nil {
		return x.NodeType
	}
	return NodeType_WEB_PROVER
}

func (x *RegisterNodeRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

// Response to a node registration request.
type RegisterNodeResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The node's ID.
	NodeId        string `protobuf:"bytes,1,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RegisterNodeResponse) Reset() {
	*x = RegisterNodeResponse{}
	mi := &file_orchestrator_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RegisterNodeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterNodeResponse) ProtoMessage() {}

func (x *RegisterNodeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_orchestrator_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterNodeResponse.ProtoReflect.Descriptor instead.
func (*RegisterNodeResponse) Descriptor() ([]byte, []int) {
	return file_orchestrator_proto_rawDescGZIP(), []int{2}
}

func (x *RegisterNodeResponse) GetNodeId() string {
	if x != nil {
		return x.NodeId
	}
	return ""
}

// A Prover task
type Task struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TaskId        string                 `protobuf:"bytes,1,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	ProgramId     string                 `protobuf:"bytes,2,opt,name=program_id,json=programId,proto3" json:"program_id,omitempty"`
	PublicInputs  []byte                 `protobuf:"bytes,3,opt,name=public_inputs,json=publicInputs,proto3" json:"public_inputs,omitempty"`
	CreatedAt     *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Task) Reset() {
	*x = Task{}
	mi := &file_orchestrator_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Task) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Task) ProtoMessage() {}

func (x *Task) ProtoReflect() protoreflect.Message {
	mi := &file_orchestrator_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Task.ProtoReflect.Descriptor instead.
func (*Task) Descriptor() ([]byte, []int) {
	return file_orchestrator_proto_rawDescGZIP(), []int{3}
}

func (x *Task) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *Task) GetProgramId() string {
	if x != nil {
		return x.ProgramId
	}
	return ""
}

func (x *Task) GetPublicInputs() []byte {
	if x != nil {
		return x.PublicInputs
	}
	return nil
}

func (x *Task) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

// Get outstanding tasks for a node.
type GetTasksRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	NodeId        string                 `protobuf:"bytes,1,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	NextCursor    string                 `protobuf:"bytes,2,opt,name=next_cursor,json=nextCursor,proto3" json:"next_cursor,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetTasksRequest) Reset() {
	*x = GetTasksRequest{}
	mi := &file_orchestrator_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTasksRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTasksRequest) ProtoMessage() {}

func (x *GetTasksRequest) ProtoReflect() protoreflect.Message {
	mi := &file_orchestrator_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTasksRequest.ProtoReflect.Descriptor instead.
func (*GetTasksRequest) Descriptor() ([]byte, []int) {
	return file_orchestrator_proto_rawDescGZIP(), []int{4}
}

func (x *GetTasksRequest) GetNodeId() string {
	if x != nil {
		return x.NodeId
	}
	return ""
}

func (x *GetTasksRequest) GetNextCursor() string {
	if x != nil {
		return x.NextCursor
	}
	return ""
}

// Tasks assigned to a node.
type GetTasksResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Tasks         []*Task                `protobuf:"bytes,1,rep,name=tasks,proto3" json:"tasks,omitempty"`
	NextCursor    string                 `protobuf:"bytes,2,opt,name=next_cursor,json=nextCursor,proto3" json:"next_cursor,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetTasksResponse) Reset() {
	*x = GetTasksResponse{}
	mi := &file_orchestrator_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTasksResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTasksResponse) ProtoMessage() {}

func (x *GetTasksResponse) ProtoReflect() protoreflect.Message {
	mi := &file_orchestrator_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTasksResponse.ProtoReflect.Descriptor instead.
func (*GetTasksResponse) Descriptor() ([]byte, []int) {
	return file_orchestrator_proto_rawDescGZIP(), []int{5}
}

func (x *GetTasksResponse) GetTasks() []*Task {
	if x != nil {
		return x.Tasks
	}
	return nil
}

func (x *GetTasksResponse) GetNextCursor() string {
	if x != nil {
		return x.NextCursor
	}
	return ""
}

// Request a prover task.
type GetProofTaskRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// This node's ID.
	NodeId string `protobuf:"bytes,1,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	// The type of this node.
	NodeType NodeType `protobuf:"varint,2,opt,name=node_type,json=nodeType,proto3,enum=nexus.orchestrator.NodeType" json:"node_type,omitempty"`
	// The client's Ed25519 public key for proof authentication.Add commentMore actions
	Ed25519PublicKey []byte `protobuf:"bytes,3,opt,name=ed25519PublicKey,proto3" json:"ed25519PublicKey,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *GetProofTaskRequest) Reset() {
	*x = GetProofTaskRequest{}
	mi := &file_orchestrator_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetProofTaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProofTaskRequest) ProtoMessage() {}

func (x *GetProofTaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_orchestrator_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProofTaskRequest.ProtoReflect.Descriptor instead.
func (*GetProofTaskRequest) Descriptor() ([]byte, []int) {
	return file_orchestrator_proto_rawDescGZIP(), []int{6}
}

func (x *GetProofTaskRequest) GetNodeId() string {
	if x != nil {
		return x.NodeId
	}
	return ""
}

func (x *GetProofTaskRequest) GetNodeType() NodeType {
	if x != nil {
		return x.NodeType
	}
	return NodeType_WEB_PROVER
}

func (x *GetProofTaskRequest) GetEd25519PublicKey() []byte {
	if x != nil {
		return x.Ed25519PublicKey
	}
	return nil
}

// A Prover task.
type GetProofTaskResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Program id. (Assuming client-side default programs)
	ProgramId string `protobuf:"bytes,1,opt,name=program_id,json=programId,proto3" json:"program_id,omitempty"`
	// Public inputs to the program.
	PublicInputs []byte `protobuf:"bytes,2,opt,name=public_inputs,json=publicInputs,proto3" json:"public_inputs,omitempty"`
	// The task's ID.
	TaskId        string `protobuf:"bytes,3,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetProofTaskResponse) Reset() {
	*x = GetProofTaskResponse{}
	mi := &file_orchestrator_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetProofTaskResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProofTaskResponse) ProtoMessage() {}

func (x *GetProofTaskResponse) ProtoReflect() protoreflect.Message {
	mi := &file_orchestrator_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProofTaskResponse.ProtoReflect.Descriptor instead.
func (*GetProofTaskResponse) Descriptor() ([]byte, []int) {
	return file_orchestrator_proto_rawDescGZIP(), []int{7}
}

func (x *GetProofTaskResponse) GetProgramId() string {
	if x != nil {
		return x.ProgramId
	}
	return ""
}

func (x *GetProofTaskResponse) GetPublicInputs() []byte {
	if x != nil {
		return x.PublicInputs
	}
	return nil
}

func (x *GetProofTaskResponse) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

// Submit the result of a prover task.
type SubmitProofRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The type of this node.
	NodeType NodeType `protobuf:"varint,2,opt,name=node_type,json=nodeType,proto3,enum=nexus.orchestrator.NodeType" json:"node_type,omitempty"`
	// Hash of the proof.
	ProofHash string `protobuf:"bytes,3,opt,name=proof_hash,json=proofHash,proto3" json:"proof_hash,omitempty"`
	// Telemetry data about the node
	NodeTelemetry *NodeTelemetry `protobuf:"bytes,4,opt,name=node_telemetry,json=nodeTelemetry,proto3" json:"node_telemetry,omitempty"`
	// ZK proof of the proof activity
	Proof []byte `protobuf:"bytes,5,opt,name=proof,proto3" json:"proof,omitempty"`
	// The task's ID.
	TaskId string `protobuf:"bytes,6,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	// A Ed25519 public key (~32 bytes) generated by
	// the node to uniquely identify this request,
	// used for DoS protection.
	Ed25519PublicKey []byte `protobuf:"bytes,7,opt,name=ed25519_public_key,json=ed25519PublicKey,proto3" json:"ed25519_public_key,omitempty"`
	// A signature of the proof, generated by signing
	// task_id + hash(proof) with the Ed25519 private key
	// corresponding to the public key.
	Signature     []byte `protobuf:"bytes,8,opt,name=signature,proto3" json:"signature,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SubmitProofRequest) Reset() {
	*x = SubmitProofRequest{}
	mi := &file_orchestrator_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubmitProofRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmitProofRequest) ProtoMessage() {}

func (x *SubmitProofRequest) ProtoReflect() protoreflect.Message {
	mi := &file_orchestrator_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmitProofRequest.ProtoReflect.Descriptor instead.
func (*SubmitProofRequest) Descriptor() ([]byte, []int) {
	return file_orchestrator_proto_rawDescGZIP(), []int{8}
}

func (x *SubmitProofRequest) GetNodeType() NodeType {
	if x != nil {
		return x.NodeType
	}
	return NodeType_WEB_PROVER
}

func (x *SubmitProofRequest) GetProofHash() string {
	if x != nil {
		return x.ProofHash
	}
	return ""
}

func (x *SubmitProofRequest) GetNodeTelemetry() *NodeTelemetry {
	if x != nil {
		return x.NodeTelemetry
	}
	return nil
}

func (x *SubmitProofRequest) GetProof() []byte {
	if x != nil {
		return x.Proof
	}
	return nil
}

func (x *SubmitProofRequest) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *SubmitProofRequest) GetEd25519PublicKey() []byte {
	if x != nil {
		return x.Ed25519PublicKey
	}
	return nil
}

func (x *SubmitProofRequest) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

// Performance stats of a node.
type NodeTelemetry struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Flops per second
	FlopsPerSec *int32 `protobuf:"varint,1,opt,name=flops_per_sec,json=flopsPerSec,proto3,oneof" json:"flops_per_sec,omitempty"`
	// Memory used in bytes for the proof activity
	MemoryUsed *int32 `protobuf:"varint,2,opt,name=memory_used,json=memoryUsed,proto3,oneof" json:"memory_used,omitempty"`
	// Memory capacity in bytes of the node
	MemoryCapacity *int32 `protobuf:"varint,3,opt,name=memory_capacity,json=memoryCapacity,proto3,oneof" json:"memory_capacity,omitempty"`
	// Geo location of the node
	Location      *string `protobuf:"bytes,4,opt,name=location,proto3,oneof" json:"location,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NodeTelemetry) Reset() {
	*x = NodeTelemetry{}
	mi := &file_orchestrator_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NodeTelemetry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeTelemetry) ProtoMessage() {}

func (x *NodeTelemetry) ProtoReflect() protoreflect.Message {
	mi := &file_orchestrator_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeTelemetry.ProtoReflect.Descriptor instead.
func (*NodeTelemetry) Descriptor() ([]byte, []int) {
	return file_orchestrator_proto_rawDescGZIP(), []int{9}
}

func (x *NodeTelemetry) GetFlopsPerSec() int32 {
	if x != nil && x.FlopsPerSec != nil {
		return *x.FlopsPerSec
	}
	return 0
}

func (x *NodeTelemetry) GetMemoryUsed() int32 {
	if x != nil && x.MemoryUsed != nil {
		return *x.MemoryUsed
	}
	return 0
}

func (x *NodeTelemetry) GetMemoryCapacity() int32 {
	if x != nil && x.MemoryCapacity != nil {
		return *x.MemoryCapacity
	}
	return 0
}

func (x *NodeTelemetry) GetLocation() string {
	if x != nil && x.Location != nil {
		return *x.Location
	}
	return ""
}

// Node information
type Node struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The node's ID
	NodeId string `protobuf:"bytes,1,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	// The type of node
	NodeType      NodeType `protobuf:"varint,2,opt,name=node_type,json=nodeType,proto3,enum=nexus.orchestrator.NodeType" json:"node_type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Node) Reset() {
	*x = Node{}
	mi := &file_orchestrator_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Node) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Node) ProtoMessage() {}

func (x *Node) ProtoReflect() protoreflect.Message {
	mi := &file_orchestrator_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Node.ProtoReflect.Descriptor instead.
func (*Node) Descriptor() ([]byte, []int) {
	return file_orchestrator_proto_rawDescGZIP(), []int{10}
}

func (x *Node) GetNodeId() string {
	if x != nil {
		return x.NodeId
	}
	return ""
}

func (x *Node) GetNodeType() NodeType {
	if x != nil {
		return x.NodeType
	}
	return NodeType_WEB_PROVER
}

// Response returning all nodes associated with a user
type UserResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The user's registered nodes
	Nodes []*Node `protobuf:"bytes,1,rep,name=nodes,proto3" json:"nodes,omitempty"`
	// Cursor to fetch the next page of nodes, empty if there are no more results
	NodesNextCursor string `protobuf:"bytes,2,opt,name=nodes_next_cursor,json=nodesNextCursor,proto3" json:"nodes_next_cursor,omitempty"`
	// The user's ID.
	UserId string `protobuf:"bytes,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// The user's wallet address
	WalletAddress string `protobuf:"bytes,4,opt,name=wallet_address,json=walletAddress,proto3" json:"wallet_address,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UserResponse) Reset() {
	*x = UserResponse{}
	mi := &file_orchestrator_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserResponse) ProtoMessage() {}

func (x *UserResponse) ProtoReflect() protoreflect.Message {
	mi := &file_orchestrator_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserResponse.ProtoReflect.Descriptor instead.
func (*UserResponse) Descriptor() ([]byte, []int) {
	return file_orchestrator_proto_rawDescGZIP(), []int{11}
}

func (x *UserResponse) GetNodes() []*Node {
	if x != nil {
		return x.Nodes
	}
	return nil
}

func (x *UserResponse) GetNodesNextCursor() string {
	if x != nil {
		return x.NodesNextCursor
	}
	return ""
}

func (x *UserResponse) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *UserResponse) GetWalletAddress() string {
	if x != nil {
		return x.WalletAddress
	}
	return ""
}

var File_orchestrator_proto protoreflect.FileDescriptor

const file_orchestrator_proto_rawDesc = "" +
	"\n" +
	"\x12orchestrator.proto\x12\x12nexus.orchestrator\x1a\x1fgoogle/protobuf/timestamp.proto\"P\n" +
	"\x13RegisterUserRequest\x12\x12\n" +
	"\x04uuid\x18\x01 \x01(\tR\x04uuid\x12%\n" +
	"\x0ewallet_address\x18\x02 \x01(\tR\rwalletAddress\"i\n" +
	"\x13RegisterNodeRequest\x129\n" +
	"\tnode_type\x18\x01 \x01(\x0e2\x1c.nexus.orchestrator.NodeTypeR\bnodeType\x12\x17\n" +
	"\auser_id\x18\x02 \x01(\tR\x06userId\"/\n" +
	"\x14RegisterNodeResponse\x12\x17\n" +
	"\anode_id\x18\x01 \x01(\tR\x06nodeId\"\x9e\x01\n" +
	"\x04Task\x12\x17\n" +
	"\atask_id\x18\x01 \x01(\tR\x06taskId\x12\x1d\n" +
	"\n" +
	"program_id\x18\x02 \x01(\tR\tprogramId\x12#\n" +
	"\rpublic_inputs\x18\x03 \x01(\fR\fpublicInputs\x129\n" +
	"\n" +
	"created_at\x18\x04 \x01(\v2\x1a.google.protobuf.TimestampR\tcreatedAt\"K\n" +
	"\x0fGetTasksRequest\x12\x17\n" +
	"\anode_id\x18\x01 \x01(\tR\x06nodeId\x12\x1f\n" +
	"\vnext_cursor\x18\x02 \x01(\tR\n" +
	"nextCursor\"c\n" +
	"\x10GetTasksResponse\x12.\n" +
	"\x05tasks\x18\x01 \x03(\v2\x18.nexus.orchestrator.TaskR\x05tasks\x12\x1f\n" +
	"\vnext_cursor\x18\x02 \x01(\tR\n" +
	"nextCursor\"\x95\x01\n" +
	"\x13GetProofTaskRequest\x12\x17\n" +
	"\anode_id\x18\x01 \x01(\tR\x06nodeId\x129\n" +
	"\tnode_type\x18\x02 \x01(\x0e2\x1c.nexus.orchestrator.NodeTypeR\bnodeType\x12*\n" +
	"\x10ed25519PublicKey\x18\x03 \x01(\fR\x10ed25519PublicKey\"s\n" +
	"\x14GetProofTaskResponse\x12\x1d\n" +
	"\n" +
	"program_id\x18\x01 \x01(\tR\tprogramId\x12#\n" +
	"\rpublic_inputs\x18\x02 \x01(\fR\fpublicInputs\x12\x17\n" +
	"\atask_id\x18\x03 \x01(\tR\x06taskId\"\xc2\x02\n" +
	"\x12SubmitProofRequest\x129\n" +
	"\tnode_type\x18\x02 \x01(\x0e2\x1c.nexus.orchestrator.NodeTypeR\bnodeType\x12\x1d\n" +
	"\n" +
	"proof_hash\x18\x03 \x01(\tR\tproofHash\x12H\n" +
	"\x0enode_telemetry\x18\x04 \x01(\v2!.nexus.orchestrator.NodeTelemetryR\rnodeTelemetry\x12\x14\n" +
	"\x05proof\x18\x05 \x01(\fR\x05proof\x12\x17\n" +
	"\atask_id\x18\x06 \x01(\tR\x06taskId\x12,\n" +
	"\x12ed25519_public_key\x18\a \x01(\fR\x10ed25519PublicKey\x12\x1c\n" +
	"\tsignature\x18\b \x01(\fR\tsignatureJ\x04\b\x01\x10\x02R\anode_id\"\xf0\x01\n" +
	"\rNodeTelemetry\x12'\n" +
	"\rflops_per_sec\x18\x01 \x01(\x05H\x00R\vflopsPerSec\x88\x01\x01\x12$\n" +
	"\vmemory_used\x18\x02 \x01(\x05H\x01R\n" +
	"memoryUsed\x88\x01\x01\x12,\n" +
	"\x0fmemory_capacity\x18\x03 \x01(\x05H\x02R\x0ememoryCapacity\x88\x01\x01\x12\x1f\n" +
	"\blocation\x18\x04 \x01(\tH\x03R\blocation\x88\x01\x01B\x10\n" +
	"\x0e_flops_per_secB\x0e\n" +
	"\f_memory_usedB\x12\n" +
	"\x10_memory_capacityB\v\n" +
	"\t_location\"Z\n" +
	"\x04Node\x12\x17\n" +
	"\anode_id\x18\x01 \x01(\tR\x06nodeId\x129\n" +
	"\tnode_type\x18\x02 \x01(\x0e2\x1c.nexus.orchestrator.NodeTypeR\bnodeType\"\xaa\x01\n" +
	"\fUserResponse\x12.\n" +
	"\x05nodes\x18\x01 \x03(\v2\x18.nexus.orchestrator.NodeR\x05nodes\x12*\n" +
	"\x11nodes_next_cursor\x18\x02 \x01(\tR\x0fnodesNextCursor\x12\x17\n" +
	"\auser_id\x18\x03 \x01(\tR\x06userId\x12%\n" +
	"\x0ewallet_address\x18\x04 \x01(\tR\rwalletAddress**\n" +
	"\bNodeType\x12\x0e\n" +
	"\n" +
	"WEB_PROVER\x10\x00\x12\x0e\n" +
	"\n" +
	"CLI_PROVER\x10\x01B\n" +
	"Z\b./;protob\x06proto3"

var (
	file_orchestrator_proto_rawDescOnce sync.Once
	file_orchestrator_proto_rawDescData []byte
)

func file_orchestrator_proto_rawDescGZIP() []byte {
	file_orchestrator_proto_rawDescOnce.Do(func() {
		file_orchestrator_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_orchestrator_proto_rawDesc), len(file_orchestrator_proto_rawDesc)))
	})
	return file_orchestrator_proto_rawDescData
}

var file_orchestrator_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_orchestrator_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_orchestrator_proto_goTypes = []any{
	(NodeType)(0),                 // 0: nexus.orchestrator.NodeType
	(*RegisterUserRequest)(nil),   // 1: nexus.orchestrator.RegisterUserRequest
	(*RegisterNodeRequest)(nil),   // 2: nexus.orchestrator.RegisterNodeRequest
	(*RegisterNodeResponse)(nil),  // 3: nexus.orchestrator.RegisterNodeResponse
	(*Task)(nil),                  // 4: nexus.orchestrator.Task
	(*GetTasksRequest)(nil),       // 5: nexus.orchestrator.GetTasksRequest
	(*GetTasksResponse)(nil),      // 6: nexus.orchestrator.GetTasksResponse
	(*GetProofTaskRequest)(nil),   // 7: nexus.orchestrator.GetProofTaskRequest
	(*GetProofTaskResponse)(nil),  // 8: nexus.orchestrator.GetProofTaskResponse
	(*SubmitProofRequest)(nil),    // 9: nexus.orchestrator.SubmitProofRequest
	(*NodeTelemetry)(nil),         // 10: nexus.orchestrator.NodeTelemetry
	(*Node)(nil),                  // 11: nexus.orchestrator.Node
	(*UserResponse)(nil),          // 12: nexus.orchestrator.UserResponse
	(*timestamppb.Timestamp)(nil), // 13: google.protobuf.Timestamp
}
var file_orchestrator_proto_depIdxs = []int32{
	0,  // 0: nexus.orchestrator.RegisterNodeRequest.node_type:type_name -> nexus.orchestrator.NodeType
	13, // 1: nexus.orchestrator.Task.created_at:type_name -> google.protobuf.Timestamp
	4,  // 2: nexus.orchestrator.GetTasksResponse.tasks:type_name -> nexus.orchestrator.Task
	0,  // 3: nexus.orchestrator.GetProofTaskRequest.node_type:type_name -> nexus.orchestrator.NodeType
	0,  // 4: nexus.orchestrator.SubmitProofRequest.node_type:type_name -> nexus.orchestrator.NodeType
	10, // 5: nexus.orchestrator.SubmitProofRequest.node_telemetry:type_name -> nexus.orchestrator.NodeTelemetry
	0,  // 6: nexus.orchestrator.Node.node_type:type_name -> nexus.orchestrator.NodeType
	11, // 7: nexus.orchestrator.UserResponse.nodes:type_name -> nexus.orchestrator.Node
	8,  // [8:8] is the sub-list for method output_type
	8,  // [8:8] is the sub-list for method input_type
	8,  // [8:8] is the sub-list for extension type_name
	8,  // [8:8] is the sub-list for extension extendee
	0,  // [0:8] is the sub-list for field type_name
}

func init() { file_orchestrator_proto_init() }
func file_orchestrator_proto_init() {
	if File_orchestrator_proto != nil {
		return
	}
	file_orchestrator_proto_msgTypes[9].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_orchestrator_proto_rawDesc), len(file_orchestrator_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_orchestrator_proto_goTypes,
		DependencyIndexes: file_orchestrator_proto_depIdxs,
		EnumInfos:         file_orchestrator_proto_enumTypes,
		MessageInfos:      file_orchestrator_proto_msgTypes,
	}.Build()
	File_orchestrator_proto = out.File
	file_orchestrator_proto_goTypes = nil
	file_orchestrator_proto_depIdxs = nil
}
